#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import argparse
import errno
import os
import re
import runpy
import shutil
import subprocess
import sys
import tempfile
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from contextlib import contextmanager
from os import path as osp
from subprocess import CalledProcessError, list2cmdline


class main(object):
    VERSION = '0.0.7'
    CONFIGURABLES = [
        'description',
        'python',
        'bootstrap_requires',
        'dev',
        'pip_config',
        'post_bootstrap',
    ]
    DEFAULT_PYTHON = 'python3'
    ENCODING = sys.stdout.encoding or 'utf-8'
    SUPPORTED_SHELLS = ['bash', 'csh', 'fish', 'zsh']

    def __init__(self):
        self.project_dir = osp.dirname(osp.abspath(__file__))
        self.project_name = osp.basename(self.project_dir)
        self.bootstrap_requires = [
            'pip>=9.0.1',  # pip should be the first
            'setuptools>=36.0.1',
            'wheel>=0.29.0'
        ]
        self.dev = True
        self.pip_config = None
        self.post_bootstrap = None

        # Before change dir
        self.script_file = osp.abspath(__file__)
        orig_dir = change_dir(self.project_dir)

        # Remove residue pyc to prevent phantom config
        self.remove_config_pyc()

        try:
            self.load_config_module('bootstrap_config')
            self.load_config_module('bootstrap_config_test')
        finally:
            self.remove_config_pyc()  # remove again to be clean

        info()  # easier to read

        args = self.parse_args()

        if args.version:
            info('bootstrap {}'.format(self.VERSION))
            return

        if args.python:
            self.python = args.python

        # Now that we've got python version, let's check
        if sys.version_info[:3] != self.python_version:
            info('Switching bootstrap from Python {} to {}'.format(
                self.format_py_version(sys.version_info[:3]),
                self.format_py_version(self.python_version)))
            change_dir(orig_dir)
            try:
                self.run([self.python, self.script_file] + sys.argv[1:])
            except CalledProcessError as e:
                exit_status = e.returncode
            else:
                exit_status = 0

            raise SystemExit(exit_status)

        self.venv_dir = osp.join(self.project_dir, '.{}-py{}'.format(
            self.project_name, self.format_py_version(self.python_version)))

        if args.dev is not None:
            self.dev = args.dev

        if args.list_config:
            for key in self.CONFIGURABLES:
                info('{} = {!r}'.format(key, getattr(self, key)))
            return

        self.clean = args.clean
        self.command = args.command
        self.shell = args.shell

        try:
            if args.no_venv:
                self.activate_venv()
            else:
                self.create_activate_venv()

            change_dir(orig_dir)

            if self.command:
                self.run(self.command)

            if self.shell:
                self.run_shell()
        except CalledProcessError:
            # No need extra message, command usually fails with verbose error
            raise SystemExit(1)
        except BootstrapError as e:
            print('ERROR:', e, file=sys.stderr)
            raise SystemExit(1)

    @property
    def description(self):
        if getattr(self, '_description', None):
            return self._description

        return (
            'bootstrap {} for development, for more info:\n\n'
            '  https://bachew.github.com/mollusc/bootstrap/').format(
            self.project_name)

    @description.setter
    def description(self, value):
        self._description = value

    @property
    def python(self):
        return getattr(self, '_python', None) or self.DEFAULT_PYTHON

    @python.setter
    def python(self, value):
        self._python = value

    @property
    def python_version(self):
        if not hasattr(self, '_python_version_cache'):
            self._python_version_cache = {}

        cache = self._python_version_cache

        if self.python not in cache:
            # Python 2.7 prints version to stderr
            output = subprocess.check_output([self.python, '--version'],
                                             stderr=subprocess.STDOUT)
            output = output.decode(self.ENCODING)
            m = re.match(r'.*(\d+)\.(\d+)\.(\d+).*', output.strip())
            cache[self.python] = int(m.group(1)), int(m.group(2)), int(m.group(3))

        return cache[self.python]

    def format_py_version(self, version):
        return '.'.join([str(c) for c in version])

    def load_config_module(self, mod_name):
        mod_file = '{}.py'.format(mod_name)

        try:
            # Not using run_path() because in python<3.4 imported modules
            # become None when calling post_bootstrap(), see:
            # https://stackoverflow.com/questions/25649676/where-is-pythons-shutdown-procedure-documented
            mod = runpy.run_module(mod_name)
        except ImportError:
            info('{}: file not found, skipped'.format(mod_file))
            return

        for key, value in mod.items():
            if key in self.CONFIGURABLES:
                setattr(self, key, value)

        info('{}: OK'.format(mod_file))

    def remove_config_pyc(self):
        paths = [
            '__pycache__',
            'bootstrap_config.pyc',
            'bootstrap_config_test.pyc'
        ]

        for path in paths:
            remove(path, echo=False)

    def parse_args(self):
        parser = ArgumentParser(description=self.description,
                                formatter_class=RawDescriptionHelpFormatter)

        parser.add_argument('--version', action='store_true',
                            help='print bootstrap script version')
        parser.add_argument('-p', '--python',
                            help='python executable (default: {})'.format(self.python))
        parser.add_argument('-n', '--no-venv', action='store_true',
                            help="don't create or update virtual environment")
        parser.add_argument('-s', '--shell', choices=self.SUPPORTED_SHELLS,
                            help='start the specified shell with virtual environment activated')

        def boolean(s):
            s = s.lower()

            if s in ('1', 'true', 'on', 'yes'):
                return True

            if s in ('0', 'false', 'off', 'no'):
                return False

            raise ValueError

        parser.add_argument('--dev', type=boolean,
                            help='development mode (default: {})'.format(int(bool(self.dev))))

        parser.add_argument('-l', dest='list_config', action='store_true',
                            help='just list configuration')
        parser.add_argument('--clean', action='store_true',
                            help='remove virtual environment before creating')
        parser.add_argument('command', nargs=argparse.REMAINDER,
                            help='command to execute inside virtual environment')
        args = parser.parse_args()
        return args

    def create_activate_venv(self):
        was_in_venv = self.in_venv()

        if self.clean:
            if was_in_venv:
                raise BootstrapError('Cannot remove virtual environment because you are inside')

            remove(self.venv_dir)

        if not was_in_venv:
            info('Not inside virtual environment, creating one')

            if self.python_version < (3, 0, 0):
                self.run_virtualenv()
            else:
                self.run(['python3', '-m', 'venv', osp.relpath(self.venv_dir)])

            self.activate_venv()

        self.configure_pip()

        pip_install = ['pip', 'install']

        for req in list(self.bootstrap_requires):
            # Install one by one, order is important e.g. pip should be installed first
            self.run(pip_install + [req])

        if osp.exists('setup.py'):
            if self.dev:
                self.run(pip_install + ['-e', '.'])
            else:
                self.run(pip_install + ['-U', '.'])

        # TODO: split activate_venv() into update_os_path() and update_sys_paths()
        self._activate_this()

        if self.dev and osp.exists('requirements.txt'):
            self.run(pip_install + ['-r', 'requirements.txt'])

        if self.post_bootstrap:
            kwargs = {
                'dev': self.dev,
                'venv_dir': self.venv_dir,
                'clean': self.clean,
            }

            try:
                work_dir = os.getcwd()
                self.post_bootstrap(**kwargs)
            finally:
                os.chdir(work_dir)

        if not self.command and not self.shell and not was_in_venv:
            shell_choices = '|'.join(self.SUPPORTED_SHELLS)
            info("\nPlease run '{} -ns <{}>' to enter virtual environment".format(
                osp.relpath(self.script_file), shell_choices))

    def run_shell(self):
        mapping = {
            'bash': self.run_bash,
            'csh': self.run_csh,
            'fish': self.run_fish,
            'zsh': self.run_zsh,
        }
        mapping[self.shell]()

    def run_bash(self):
        init_script = (
            'if [ -e ~/.bashrc ]; then . ~/.bashrc; fi\n'
            '. "{}"\n'.format(osp.join(self.venv_dir, 'bin/activate'))
        )

        with self.temp_file(init_script) as path:
            self.run(['bash', '--init-file', path, '-i'])

    def run_csh(self):
        cmd = 'source {}'.format(osp.relpath(osp.join(self.venv_dir, 'bin/activate.csh')))
        raise BootstrapError('csh is not yet supported, please run {!r}'.format(cmd))

    def run_fish(self):
        cmd = 'source {}'.format(osp.relpath(osp.join(self.venv_dir, 'bin/activate.fish')))
        raise BootstrapError('fish is not yet supported, please run {!r}'.format(cmd))

    def run_zsh(self):
        cmd = 'source {}'.format(osp.relpath(osp.join(self.venv_dir, 'bin/activate')))
        raise BootstrapError('zsh is not yet supported, please run {!r}'.format(cmd))

    def activate_venv(self):
        if self.in_conda_venv():
            info("Inside Conda virtual environment")
            # It is also not possible to create virtual environment inside Condo virtual environment
            return

        if self.in_normal_venv():
            info('Inside virtual environment')
            return

        info('Activating virtual environment {!r}'.format(self.venv_dir))
        self._activate_this()
        assert self.in_venv()

    def in_venv(self):
        return self.in_conda_venv() or self.in_normal_venv()

    def in_conda_venv(self):
        sys_version = sys.version.lower()
        return 'conda' in sys_version or 'continuum' in sys_version

    def in_normal_venv(self):
        base_prefix = getattr(sys, 'real_prefix', None) or getattr(sys, 'base_prefix', sys.prefix)
        return base_prefix != sys.prefix

    def _activate_this(self):
        # Modified from https://github.com/pypa/virtualenv/blob/master/virtualenv_embedded/activate_this.py
        old_os_path = os.environ.get('PATH', '')
        base = osp.abspath(self.venv_dir)
        os.environ['PATH'] = osp.join(base, 'bin') + os.pathsep + old_os_path
        if sys.platform == 'win32':
            site_packages = os.path.join(base, 'Lib', 'site-packages')
        else:
            site_packages = os.path.join(base, 'lib', 'python%s' % sys.version[:3], 'site-packages')
        prev_sys_path = list(sys.path)
        import site
        site.addsitedir(site_packages)
        sys.real_prefix = sys.prefix
        sys.prefix = base
        # Move the added items to the front of the path:
        new_sys_path = []
        for item in list(sys.path):
            if item not in prev_sys_path:
                new_sys_path.append(item)
                sys.path.remove(item)
        sys.path[:0] = new_sys_path

    def run(self, cmd, **kwargs):
        info(list2cmdline(cmd))

        try:
            subprocess.check_call(cmd, **kwargs)
        except EnvironmentError as e:
            if e.errno == errno.ENOENT:
                raise BootstrapError('Command {!r} not found, did you install it?'.format(cmd[0]))

            raise

    def run_virtualenv(self):
        cmd = ['virtualenv']

        # In Debian 8, virtualenv gives "ImportError: cannot import name HashMissing"
        # on existing virtual environment trying to reinstall pip
        if osp.exists(osp.join(self.venv_dir, 'bin', 'pip')):
            cmd.append('--no-pip')
            cmd.append('--no-setuptools')

        cmd.append(self.venv_dir)
        self.run(cmd)

    def configure_pip(self):
        config_file = osp.join(self.venv_dir, 'pip.conf')

        if self.pip_config is None:
            remove(config_file)
            return

        config = []

        for section_name, section in self.pip_config.items():
            if not section:
                continue

            config.append('[{}]'.format(section_name))

            for name, value in section.items():
                config.append('{} = {}'.format(name, value))

            config.append('')

        info('Writing {!r}'.format(osp.relpath(config_file)))

        with open(config_file, 'w') as f:
            f.write('\n'.join(config))

    @contextmanager
    def temp_file(self, content):
        fd, path = tempfile.mkstemp(prefix='{}-'.format(self.project_name))
        try:
            os.write(fd, content.encode(self.ENCODING))
            os.close(fd)
            yield path
        finally:
            os.remove(path)


class BootstrapError(Exception):
    pass


def info(*msg):
    print(*msg)
    sys.stdout.flush()


def change_dir(path):
    orig_dir = os.getcwd()

    if osp.exists(path) and not osp.samefile(path, orig_dir):
        info('cd {!r}'.format(path))
        os.chdir(path)

    return orig_dir


def remove(path, echo=True):
    if echo:
        info('Removing {!r}'.format(osp.relpath(path)))

    try:
        try:
            shutil.rmtree(path)
        except OSError as e:
            if e.errno == errno.ENOTDIR:
                pass  # continue remove the file
            else:
                raise

        os.remove(path)
    except OSError as e:
        if e.errno == errno.ENOENT:
            pass  # OK if not exists
        else:
            raise


if __name__ == '__main__':
    main()
